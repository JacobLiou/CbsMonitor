using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Reflection;using System.Text;namespace SofarBMS{    public static class ModelExtendMethod    {        #region 获取特性信息        /// <summary>        /// 获取数据表名 TableAttribute        /// </summary>        public static string GetTableName<T>(this Type modelType)        {            if (!modelType.IsDefined(typeof(TableAttribute)))                return modelType.Name;            var tableNameAttr =                (TableAttribute) modelType.GetCustomAttribute(typeof(TableAttribute));            return string.IsNullOrEmpty(tableNameAttr.Name)                ? modelType.Name.ToPascal()                : tableNameAttr.Name;        }        /// <summary>        /// 获取在该属性上标记的字符串， 用来修改列标题 ColumnHeaderAttribute        /// </summary>        public static string GetHeader(this PropertyInfo property)        {            if (!property.IsDefined(typeof(ColumnHeaderAttribute)))                return property.Name;            var attr =                (ColumnHeaderAttribute) property.GetCustomAttribute(typeof(ColumnHeaderAttribute));            return attr.HeaderName;        }        /// <summary>        /// 设置DataGrid列是否可编辑        /// </summary>        /// <param name="property"></param>        /// <returns></returns>        public static bool GetEditable(this PropertyInfo property)        {            return property.IsDefined(typeof(CanEditAttribute));        }        /// <summary>        /// 用该特性填入数据库列名        /// 将属性与数据库列映射        /// 使用ColumnAttribute特性时 如果填入字符就是用，不填就获取Pascal命名        /// </summary>        public static string GetRealColumn(this PropertyInfo prop, DataTable table = null)        {            string name = prop.Name;            if (table != null && table.Columns.Contains(name))            {                return name;            }            if (prop.IsDefined(typeof(ColumnAttribute)))            {                ColumnAttribute columnNameAttr =                    prop.GetCustomAttribute(typeof(ColumnAttribute)) as ColumnAttribute;                return string.IsNullOrEmpty(columnNameAttr?.Name)                    ? prop.Name.GetPascalFromDbField()                    : columnNameAttr.Name;            }            return name;        }        public static string GetEnumDescription<T>(this T enumInstance) where T : Enum        {            Type type = typeof(T);            string name = Enum.GetName(type, enumInstance);            var info = type.GetField(name);            var attribute = info.GetCustomAttribute<DescriptionAttribute>();            if (attribute != null)            {                return attribute.Description;            }            return name;        }        #endregion        #region 字符串        /// <summary>        /// Split by '_'        /// </summary>        /// <param name="columnName"></param>        /// <returns></returns>        public static string GetPascalFromDbField(this string columnName)        {            string[] arrs = columnName.Split('_');            if (arrs.Length == 1)            {                columnName = ToPascal(columnName);            }            else            {                columnName = string.Empty;                foreach (var item in arrs)                {                    columnName += ToPascal(item);                }            }            return columnName;        }        public static string ToPascal(this string str)        {            str = str.Replace("_", "").Replace("-", "");            return str.Substring(0, 1).ToUpper() + str.Substring(1);        }        public static string TrimWhiteSpace(this string orignalString)        {            return orignalString.Replace("\0", "").Replace("\r\n", "").Replace(" ", "");        }        public static string TrimJsonWhiteSpace(this string orignalString)        {            return orignalString.Replace("\0", "").Replace("\r\n", "");        }        public static bool EqualsIgnoreCase(this Enum left, string right)        {            return left.ToString().EqualsIgnoreCase(right);        }        public static bool EqualsIgnoreCase(this string left, string right)        {            if (left == null || right == null)            {                return false;            }            return string.Equals(left, right, StringComparison.CurrentCultureIgnoreCase);        }        public static string PackInChar(this string str, string chars)        {            return chars + str + chars;        }        public static string GetStringTo(this string str, Encoding encodingFrom, Encoding encodingTo)        {            byte[] temp1 = Encoding.Convert(encodingFrom, encodingTo, encodingFrom.GetBytes(str));            return encodingTo.GetString(temp1);        }        #endregion        #region 其他        public static void CheckTableNull(this DataTable table)        {            if (table == null)            {                throw new NullReferenceException("Table is null!");            }        }        public static void CheckEnumerableNull<T>(this IEnumerable<T> enums)        {            if (enums == null)            {                throw new NullReferenceException("The enumerable is null!");            }        }        #endregion    }}